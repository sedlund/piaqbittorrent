name: build
on:
  pull_request:
    branches:
      - 'dev'
      - 'master'
      - 'v*'
    paths:
      - '.github/workflows/build.yaml'
      - 'docker-compose.yaml'
      - '**/Dockerfile'
      - '**/start.sh'
  push:
    branches:
      - 'dev'
      - 'master'
      - 'v*'
    tags:
      - 'v*'
    paths:
      - '.github/workflows/build.yaml'
      - 'docker-compose.yaml'
      - '**/Dockerfile'
      - '**/start.sh'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Prepare
      id: prepare
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/master ]]; then
          echo ::set-output name=version::latest
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          echo ::set-output name=version::${GITHUB_REF#refs/heads/}
        else
          echo ::set-output name=version::snapshot
        fi

        echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
        #echo ::set-output name=docker_image::${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}

    # https://github.com/crazy-max/ghaction-docker-buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Environment
      run: |
        echo home=$HOME
        echo git_ref=$GITHUB_REF
        echo git_sha=$GITHUB_SHA
        echo version=${{ steps.prepare.outputs.version }}
        echo date=${{ steps.prepare.outputs.build_date }}
        #echo image=${{ steps.prepare.outputs.docker_image }}
        echo platforms=${{ steps.prepare.outputs.docker_platforms }}
        echo avail_platforms=${{ steps.buildx.outputs.platforms }}

    # https://github.com/actions/checkout
    - name: Checkout
      uses: actions/checkout@v2

    - name: Docker Buildx (try build)
      run: |
        docker buildx bake \
          --set vpn.platform=${{ steps.prepare.outputs.docker_platforms }} \
          --set qb.platform=${{ steps.prepare.outputs.docker_platforms }} \
          --set vpn.output=type=image,push=false \
          --set qb.output=type=image,push=false \
          --set qb-web.output=type=image,push=false \
          --set vpn.args.VERSION=${{ steps.prepare.outputs.version }} \
          --set qb.args.VERSION=${{ steps.prepare.outputs.version }} \
          --set qb-web.args.VERSION=${{ steps.prepare.outputs.version }} \
          --set vpn.args.BUILD_DATE=${{ steps.prepare.outputs.build_date }} \
          --set qb.args.BUILD_DATE=${{ steps.prepare.outputs.build_date }} \
          --set qb-web.args.BUILD_DATE=${{ steps.prepare.outputs.build_date }} \
          --set vpn.args.VCS_REF=${GITHUB_SHA} \
          --set qb.args.VCS_REF=${GITHUB_SHA} \
          --set qb-web.args.VCS_REF=${GITHUB_SHA} \
          --set vpn.tags="${{ secrets.DOCKER_USERNAME }}/piavpn:${{ steps.prepare.outputs.version }}" \
          --set qb.tags="${{ secrets.DOCKER_USERNAME }}/qbittorrent:${{ steps.prepare.outputs.version }}" \
          --set qb-web.tags="${{ secrets.DOCKER_USERNAME }}/qb-web:${{ steps.prepare.outputs.version }}" \
          --file docker-compose.yaml

    - name: Docker Login
      if: success()
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

    - name: Docker Buildx (push)
      if: success()
      run: |
        docker buildx bake \
          --set vpn.platform=${{ steps.prepare.outputs.docker_platforms }} \
          --set qb.platform=${{ steps.prepare.outputs.docker_platforms }} \
          --set vpn.output=type=image,push=true \
          --set qb.output=type=image,push=true \
          --set qb-web.output=type=image,push=true \
          --set vpn.args.VERSION=${{ steps.prepare.outputs.version }} \
          --set qb.args.VERSION=${{ steps.prepare.outputs.version }} \
          --set qb-web.args.VERSION=${{ steps.prepare.outputs.version }} \
          --set vpn.args.BUILD_DATE=${{ steps.prepare.outputs.build_date }} \
          --set qb.args.BUILD_DATE=${{ steps.prepare.outputs.build_date }} \
          --set qb-web.args.BUILD_DATE=${{ steps.prepare.outputs.build_date }} \
          --set vpn.args.VCS_REF=${GITHUB_SHA} \
          --set qb.args.VCS_REF=${GITHUB_SHA} \
          --set qb-web.args.VCS_REF=${GITHUB_SHA} \
          --set vpn.tags="${{ secrets.DOCKER_USERNAME }}/piavpn:${{ steps.prepare.outputs.version }}" \
          --set qb.tags="${{ secrets.DOCKER_USERNAME }}/qbittorrent:${{ steps.prepare.outputs.version }}" \
          --set qb-web.tags="${{ secrets.DOCKER_USERNAME }}/qb-web:${{ steps.prepare.outputs.version }}" \
          --file docker-compose.yaml

    - name: Docker Check Manifest
      #if: success() && startsWith(github.ref, 'refs/tags/v')
      if: success()
      run: |
        docker buildx imagetools inspect ${{ secrets.DOCKER_USERNAME }}/piavpn:${{ steps.prepare.outputs.version }}
        docker buildx imagetools inspect ${{ secrets.DOCKER_USERNAME }}/qbittorrent:${{ steps.prepare.outputs.version }}
        docker buildx imagetools inspect ${{ secrets.DOCKER_USERNAME }}/qb-web:${{ steps.prepare.outputs.version }}

    - name: Clear
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json
